{"python":"# Importing necessary libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Loading the NBA stats CSV file\nfile_path = 'NBA Stats 202425 All Metrics NBA Player Props Tool.csv'\ndf = pd.read_csv(file_path)\n\n# Calculating the correlation matrix\ncorrelation_matrix = df.corr()\n\n# Finding the two columns with the highest correlation\nhighest_correlation = correlation_matrix.unstack().sort_values(ascending=False)\n# Dropping self-correlations\nhighest_correlation = highest_correlation[highest_correlation < 1]\n\n# Getting the top two correlated columns\ntop_two_columns = highest_correlation.idxmax(), highest_correlation.max()\n\n# Identifying the top 10 scorers by PPG\ntop_10_scorers = df.nlargest(10, 'PPG')[['NAME', 'PPG']]\n\n# Creating a bar graph for the top 10 scorers\nplt.figure(figsize=(10, 6))\nsns.barplot(data=top_10_scorers, x='NAME', y='PPG', palette='viridis')\nplt.title('Top 10 Scorers by Points Per Game (PPG)')\nplt.xticks(rotation=45)\nplt.xlabel('Player Name')\nplt.ylabel('Points Per Game (PPG)')\nplt.tight_layout()\nplt.show()\n\n# Outputting the results\n(top_two_columns, top_10_scorers)"}{"python":"# Inspecting the dataframe to identify non-numeric columns\nprint(df.head())\nprint(df.dtypes)"}{"python":"# Cleaning the dataframe to ensure numeric columns are in the correct format\n# Converting relevant columns to numeric, forcing errors to NaN\nnumeric_columns = ['AGE', 'GP', 'MPG', 'USG%', 'TO%', 'FTA', 'FT%', '2PA', '2P%', '3PA', '3P%', 'eFG%', 'TS%', 'PPG', 'RPG', 'APG', 'SPG', 'BPG', 'TPG', 'P+R', 'P+A', 'P+R+A', 'VI', 'ORtg', 'DRtg']\ndf[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')\n\n# Recalculating the correlation matrix after cleaning\ncorrelation_matrix = df.corr()\n\n# Finding the two columns with the highest correlation\nhighest_correlation = correlation_matrix.unstack().sort_values(ascending=False)\nhighest_correlation = highest_correlation[highest_correlation < 1]\ntop_two_columns = highest_correlation.idxmax(), highest_correlation.max()\n\n# Identifying the top 10 scorers by PPG\n# Filtering out rows with NaN in 'PPG' to ensure accurate results\ntop_10_scorers = df.dropna(subset=['PPG']).nlargest(10, 'PPG')[['NAME', 'PPG']]\n\n# Creating a bar graph for the top 10 scorers\nplt.figure(figsize=(10, 6))\nsns.barplot(data=top_10_scorers, x='NAME', y='PPG', palette='viridis')\nplt.title('Top 10 Scorers by Points Per Game (PPG)')\nplt.xticks(rotation=45)\nplt.xlabel('Player Name')\nplt.ylabel('Points Per Game (PPG)')\nplt.tight_layout()\nplt.show()\n\n# Outputting the results\n(top_two_columns, top_10_scorers)"}{"python":"# Selecting only numeric columns from the dataframe for correlation calculation\nnumeric_df = df.select_dtypes(include=['float64', 'int64'])\n\n# Calculating the correlation matrix with only numeric columns\ncorrelation_matrix = numeric_df.corr()\n\n# Finding the two columns with the highest correlation\nhighest_correlation = correlation_matrix.unstack().sort_values(ascending=False)\nhighest_correlation = highest_correlation[highest_correlation < 1]\ntop_two_columns = highest_correlation.idxmax(), highest_correlation.max()\n\n# Identifying the top 10 scorers by PPG\n# Filtering out rows with NaN in 'PPG' to ensure accurate results\ntop_10_scorers = df.dropna(subset=['PPG']).nlargest(10, 'PPG')[['NAME', 'PPG']]\n\n# Creating a bar graph for the top 10 scorers\nplt.figure(figsize=(10, 6))\nsns.barplot(data=top_10_scorers, x='NAME', y='PPG', palette='viridis')\nplt.title('Top 10 Scorers by Points Per Game (PPG)')\nplt.xticks(rotation=45)\nplt.xlabel('Player Name')\nplt.ylabel('Points Per Game (PPG)')\nplt.tight_layout()\nplt.show()\n\n# Outputting the results\n(top_two_columns, top_10_scorers)"}